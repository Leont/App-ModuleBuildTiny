use Test::More;
use Test::Exception;
use Test::Deep;
use File::Temp qw/ tempfile /;

use lib "lib";

BEGIN { use_ok('App::ModuleBuildTiny'); }

subtest 'dies on bad action' => sub {
    dies_ok {
        modulebuildtiny(undef);
    }, 'undef action';
    
    dies_ok {
	modulebuildtiny('');
    }, 'no action';

    dies_ok {
	modulebuildtiny('foo');
    }, 'invalid action';
};

subtest 'uptodate handles missing destination' => sub {
    is(1, 1, 'true');
    # is(uptodate('bad_file_name', ()), "", 'bad_file_name handled');
};

subtest 'valid actions' => sub {
    is(modulebuildtiny('dist'),       1, 'valid actions - dist');
    is(modulebuildtiny('distdir'),   '', 'valid actions - distdir');
    is(modulebuildtiny('test'),       0, 'valid actions - test');
    is(modulebuildtiny('run', 'ls'),  0, 'valid actions - run');
    #is(modulebuildtiny('shell', ''),     '', 'valid actions - shell');
    is(modulebuildtiny('listdeps'),  '', 'valid actions - listdeps');
    #is(modulebuildtiny('regenerate'),'', 'valid actions - regenerate');
};

subtest 'prereqs_for' => sub {
    my $meta = App::ModuleBuildTiny::get_meta();
    is(App::ModuleBuildTiny::prereqs_for($meta, 'build', 'requires', 'Who::Knows', undef), 0, 'prereqs_for zero for bad module and no default');
    is(App::ModuleBuildTiny::prereqs_for($meta, 'build', 'requires', 'Who::Knows', 1), 1, 'prereqs_for default for bad module');
    is(App::ModuleBuildTiny::prereqs_for($meta, 'runtime', 'requires', 'perl', 1), '5.010', 'prereqs_for perl');
};

subtest 'get_files' => sub {
    my %test_opts;
    $test_opts{regenerate}{MANIFEST} = 0;
    my $result = App::ModuleBuildTiny::get_files(%test_opts);
    is(keys %$result > 0, 1, 'get_files manifest read');

    # $test_opts{regenerate}{MANIFEST} = 1;
    # $test_opts{regenerate}{'META.json'} = 1;
    # $test_opts{meta} = App::ModuleBuildTiny::get_meta();
    # my $result = App::ModuleBuildTiny::get_files(%test_opts);
    # is(keys %$result > 0, 1, 'get_files manifest find');
    # is($result->{Build.PL}, '', 'get_file generated version and use');
    
};

subtest 'uptodate' => sub {
    is(App::ModuleBuildTiny::uptodate('t/00-compile.t', 't/00-compile.t'), 1, 'uptodate same source and destination');
    # TODO create file with modification time > 1 day ago
};

subtest 'find' => sub {
    is(App::ModuleBuildTiny::find(qr/\.t$/, '.'), 3, 'find test file count');
    is(App::ModuleBuildTiny::find(qr/no_match/, '.'), undef, 'find no match for regex');
    is(App::ModuleBuildTiny::find(qr/\.t$/, 'doesnt_exist'), undef, 'find dir does not exist');
};

subtest 'mbt_version' => sub {
    {
        local *App::ModuleBuildTiny::find = sub { return $_[0] eq qr/\.PL$/; };
	is(App::ModuleBuildTiny::mbt_version('PL'), '0.039', 'mbt_version found .PL');
    }
    {
        local *App::ModuleBuildTiny::find = sub { return $_[0] eq qr/\.xs$/; };
	is(App::ModuleBuildTiny::mbt_version('XS'), '0.036', 'mbt_version found .xs');
    }
    is(App::ModuleBuildTiny::mbt_version(''), '0.019', 'mbt_version no dash');
    # TODO 0.014 File::Temp?
    is(App::ModuleBuildTiny::mbt_version('-'), '0.007', 'mbt_version base version');
};

subtest 'get_meta' => sub {
    my $result = App::ModuleBuildTiny::get_meta();
    is($result->{release_status}, 'stable', 'get_meta release status');
    is($result->{author}[0], 'Leon Timmermans <leont@cpan.org>', 'get_meta author');
    is((keys %{$result->{provides}})[0], 'App::ModuleBuildTiny', 'get_meta provides');
    is($result->{generated_by}, 'App::ModuleBuildTiny version 0.009', 'get_meta generated by');
    is($result->{version}, '0.009', 'get_meta version');
    is($result->{license}[0], 'perl_5', 'get_meta license');
    is($result->{abstract}, 'A standalone authoring tool for Module::Build::Tiny', 'get_meta abstract');
    is($result->{name}, 'App-ModuleBuildTiny', 'get_meta name');
  
    my %test_opts;
    my $fh;
    ($fh, $test_opts{mergefile}) = tempfile('temp-XXXXX', SUFFIX => '.yml');
    my $result_mergefile = App::ModuleBuildTiny::get_meta(%test_opts);
    cmp_deeply($result_mergefile, $result, 'get_meta empty mergefile');

    print $fh '---\nname: My-Distribution\nversion: 1.23\nresources:\n  homepage: "http://example.com/dist/My-Distribution"\n';
    close $fh;
    my $result_mergefile = App::ModuleBuildTiny::get_meta(%test_opts);
    cmp_deeply($result_mergefile, $result, 'get_meta empty mergefile'); # TODO should fail

    # delete $test_opts{mergefile};
    # $test_opts{regenerate}{'META.json'} = 1;
    # my $result_regenerate = App::ModuleBuildTiny::get_meta(%test_opts);
    # cmp_deeply($result_mergefile, $result, 'get_meta empty mergefile');
};

done_testing();
